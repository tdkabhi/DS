            else:
                    logging.error("Failed to retrieve chunk %s for file %s", chunk_id, filename)
                    return

        logging.info("File %s downloaded successfully as downloaded_%s", filename, filename)

    def retrieve_chunk(self, servers, filename, chunk_id):
        """Retrieve a chunk from available servers and verify its checksum."""
        for server_port in servers:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect(('localhost', server_port))
                    download_request = {'command': 'download', 'filename': filename, 'chunk_id': chunk_id}
                    s.send(pickle.dumps(download_request))
                    response = pickle.loads(s.recv(4096))

                if response.get('status') == 'success':
                    data = response['data']
                    checksum = response['checksum']
                    if self.calculate_checksum(data) == checksum:
                        logging.info("Successfully retrieved and verified chunk %s from server %d", chunk_id, server_port)
                        return data
                    else:
                        logging.warning("Checksum mismatch for chunk %s from server %d, trying next server", chunk_id, server_port)
            except Exception as e:
                logging.error("Failed to retrieve chunk %s from server %d: %s", chunk_id, server_port, e)

        return None

    def list_files(self):
        """Request a list of files from the MasterServer."""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as master_sock:
            master_sock.connect((self.master_host, self.master_port))
            list_request = {'command': 'list_files'}
            master_sock.send(pickle.dumps(list_request))
            response = pickle.loads(master_sock.recv(4096))

        if isinstance(response, list):
            logging.info("Files available on the server:")
            for file in response:
                print(f