im a heroimport socket
import os
import pickle
import hashlib
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

MASTER_SERVER_PORT = 7082
CHUNK_SIZE = 2048  # Consistent with the chunk size used in Master and ChunkServer

class Client:
    def __init__(self, master_host='localhost', master_port=MASTER_SERVER_PORT):
        self.master_host = master_host
        self.master_port = master_port

    def calculate_checksum(self, data):
        """Calculate the checksum of data for integrity checks."""
        return hashlib.sha256(data).hexdigest()

    def upload_file(self, filename):
        """Upload a file to the distributed file system."""
        if not os.path.isfile(filename):
            logging.error("File %s does not exist", filename)
            return

        file_size = os.path.getsize(filename)
        num_chunks = (file_size + CHUNK_SIZE - 1) // CHUNK_SIZE  # Calculate number of chunks
        logging.info("Uploading file %s, size %d bytes, %d chunks", filename, file_size, num_chunks)

        # Notify MasterServer about the upload
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as master_sock:
            master_sock.connect((self.master_host, self.master_port))
            upload_request = {'command': 'upload', 'filename': filename, 'file_size': file_size}
            master_sock.send(pickle.dumps(upload_request))
            response = pickle.loads(master_sock.recv(4096))

        if response.get('status') != 'success':
            logging.error("Failed to upload file: %s", response.get('message'))
            return

        chunk_allocation = response.get('chunks')
        # Send each chunk to its designated server
        with open(filename, 'rb') as f:
            for chunk_id, servers in chunk_allocation.items():
                data = f.read(CHUNK_SIZE)
                checksum = self.calculate_checksum(data)

                for server_port in servers:
                    self.send_chunk(server_port, filename, chunk_i